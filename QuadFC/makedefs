#******************************************************************************
#
# makedefs - Definitions common to all makefiles.
#
# Copyright (C) 2014  Martin Lundh
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#******************************************************************************

#******************************************************************************
#
# The compiler to be used.
#
#******************************************************************************
ifndef COMPILER
COMPILER=gcc
endif

#******************************************************************************
#
# The debugger to be used.
#
#******************************************************************************
ifndef DEBUGGER
DEBUGGER=gdb
endif

#******************************************************************************
#
# Definitions for using GCC.
#
#******************************************************************************
ifeq (${COMPILER}, gcc)

#
# The command for calling the compiler.
#
CC=arm-none-eabi-gcc

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb         \
       -mcpu=cortex-m3 \
       -MD             \
       -MP             \
       -MF

#
# The flags passed to the compiler.
#
# -MD generate dependency files as a side-effect
# -MPadd a phony target for each dependency other than the main file. 
# -MT change target of the rule emitted by dependency generation. 
#

CFLAGS=-mthumb -mcpu=cortex-m3 -MD -MP -MF "$(@:%.o=%.d)" -MT "$(@:%.o=%.d)" -MT "$(@:%.o=%.o)"
CFLAGS+= -fdata-sections -ffunction-sections -mlong-calls -Wall -c -std=gnu99 -Wshadow
#
# The command for calling the library archiver.
#
AR=arm-none-eabi-ar

#
# The command for calling the linker.
#
LD=arm-none-eabi-ld

#
# The flags passed to the linker.
#
LDFLAGS= -mthumb -Wl,-Map,"$(BUILD_DIR)/out.map" -Wl,--start-group -lm  -Wl,--end-group -Wl,--gc-sections -mcpu=cortex-m3 -T $(SCATTER_QuadFC) -Wl,--cref -Wl,--entry=$(ENTRY_QuadFC) -mthumb

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC=${shell ${CC} -mthumb -march=armv6t2 -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC=${shell ${CC} -mthumb -march=armv6t2 -print-file-name=libc.a}

#
# The command for extracting images from the linked executables.
#
OBJCOPY=arm-none-eabi-objcopy

endif

#******************************************************************************
#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
#******************************************************************************
ifdef DEBUG
CFLAGS += -g -O0
else
CFLAGS += -O1
endif

#******************************************************************************
#
# The rule for building the object file from each C source file.
#
#******************************************************************************
${BUILD_DIR}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
		 echo "  CC    ${<}";  \
	 else                                                    \
	     echo ${CC} ${CFLAGS} -o ${@} -c ${<}; \
	 fi
	@${CC} ${CFLAGS} -o ${@} -c ${<}

#******************************************************************************
#
# The rule for building the object file from each assembly source file.
#
#******************************************************************************
${BUILD_DIR}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  CC    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
ifeq (${COMPILER}, gcc)
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}
endif

#******************************************************************************
#
# The rule for creating an object library.
#
#******************************************************************************
${BUILD_DIR}/%.a:
	@if [ 'x${VERBOSE}' = x ];     \
	 then                          \
	     echo "  AR    ${@}";      \
	 else                          \
	     echo ${AR} -cr ${@} ${^}; \
	 fi
	@${AR} -cr ${@} ${^}

#******************************************************************************
#
# The rule for linking the application.
#
#******************************************************************************
${BUILD_DIR}/%.elf: 
	@if [ 'x${VERBOSE}' = x ]; \
	 then                      \
	     echo "  LD    ${@}";  \
	 fi
ifeq (${COMPILER}, gcc)
	@if [ 'x${VERBOSE}' != x ];                           \
	 then                                                 \
	     echo ${CC} -o $(@) $(OBJS) $(LDFLAGS); 					  \
	 fi
	@${CC} -o $(@) $(OBJS) $(LDFLAGS)
	@${OBJCOPY} -O binary ${@} ${@:.elf=.bin}
endif
