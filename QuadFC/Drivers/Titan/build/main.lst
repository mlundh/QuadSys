ARM GAS  /tmp/ccRSbPQP.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemClock_Config:
  26              	.LFB767:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** 
  21:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/main.c **** #include "main.h"
  23:Core/Src/main.c **** #include "adc.h"
  24:Core/Src/main.c **** #include "crc.h"
  25:Core/Src/main.c **** #include "dma.h"
  26:Core/Src/main.c **** #include "i2c.h"
  27:Core/Src/main.c **** #include "spi.h"
  28:Core/Src/main.c **** #include "tim.h"
  29:Core/Src/main.c **** #include "usart.h"
  30:Core/Src/main.c **** #include "gpio.h"
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccRSbPQP.s 			page 2


  32:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/main.c **** void SystemClock_Config(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c ****   
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Core/Src/main.c ****   HAL_Init();
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END Init */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccRSbPQP.s 			page 3


  89:Core/Src/main.c ****   /* Configure the system clock */
  90:Core/Src/main.c ****   SystemClock_Config();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Initialize all configured peripherals */
  97:Core/Src/main.c ****   MX_GPIO_Init();
  98:Core/Src/main.c ****   MX_DMA_Init();
  99:Core/Src/main.c ****   MX_ADC1_Init();
 100:Core/Src/main.c ****   MX_CRC_Init();
 101:Core/Src/main.c ****   MX_I2C1_Init();
 102:Core/Src/main.c ****   MX_SPI1_Init();
 103:Core/Src/main.c ****   MX_SPI2_Init();
 104:Core/Src/main.c ****   MX_UART9_Init();
 105:Core/Src/main.c ****   MX_UART10_Init();
 106:Core/Src/main.c ****   MX_USART1_UART_Init();
 107:Core/Src/main.c ****   MX_USART2_UART_Init();
 108:Core/Src/main.c ****   MX_USART3_UART_Init();
 109:Core/Src/main.c ****   MX_USART6_UART_Init();
 110:Core/Src/main.c ****   MX_TIM1_Init();
 111:Core/Src/main.c ****   MX_TIM3_Init();
 112:Core/Src/main.c ****   MX_SPI4_Init();
 113:Core/Src/main.c ****   MX_UART8_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Infinite loop */
 119:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 120:Core/Src/main.c ****   while (1)
 121:Core/Src/main.c ****   {
 122:Core/Src/main.c ****     /* USER CODE END WHILE */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 125:Core/Src/main.c ****   }
 126:Core/Src/main.c ****   /* USER CODE END 3 */
 127:Core/Src/main.c **** }
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /**
 130:Core/Src/main.c ****   * @brief System Clock Configuration
 131:Core/Src/main.c ****   * @retval None
 132:Core/Src/main.c ****   */
 133:Core/Src/main.c **** void SystemClock_Config(void)
 134:Core/Src/main.c **** {
  28              		.loc 1 134 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 80
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 95B0     		sub	sp, sp, #84
ARM GAS  /tmp/ccRSbPQP.s 			page 4


  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 96
 135:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  41              		.loc 1 135 0
  42 0004 3422     		movs	r2, #52
  43 0006 0021     		movs	r1, #0
  44 0008 07A8     		add	r0, sp, #28
  45 000a FFF7FEFF 		bl	memset
  46              	.LVL0:
 136:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  47              		.loc 1 136 0
  48 000e 0024     		movs	r4, #0
  49 0010 0294     		str	r4, [sp, #8]
  50 0012 0394     		str	r4, [sp, #12]
  51 0014 0494     		str	r4, [sp, #16]
  52 0016 0594     		str	r4, [sp, #20]
  53 0018 0694     		str	r4, [sp, #24]
  54              	.LBB2:
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /** Configure the main internal regulator output voltage 
 139:Core/Src/main.c ****   */
 140:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
  55              		.loc 1 140 0
  56 001a 0094     		str	r4, [sp]
  57 001c 1B4B     		ldr	r3, .L3
  58 001e 1A6C     		ldr	r2, [r3, #64]
  59 0020 42F08052 		orr	r2, r2, #268435456
  60 0024 1A64     		str	r2, [r3, #64]
  61 0026 1B6C     		ldr	r3, [r3, #64]
  62 0028 03F08053 		and	r3, r3, #268435456
  63 002c 0093     		str	r3, [sp]
  64 002e 009B     		ldr	r3, [sp]
  65              	.LBE2:
  66              	.LBB3:
 141:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  67              		.loc 1 141 0
  68 0030 0194     		str	r4, [sp, #4]
  69 0032 174B     		ldr	r3, .L3+4
  70 0034 1A68     		ldr	r2, [r3]
  71 0036 42F44042 		orr	r2, r2, #49152
  72 003a 1A60     		str	r2, [r3]
  73 003c 1B68     		ldr	r3, [r3]
  74 003e 03F44043 		and	r3, r3, #49152
  75 0042 0193     		str	r3, [sp, #4]
  76 0044 019B     		ldr	r3, [sp, #4]
  77              	.LBE3:
 142:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 143:Core/Src/main.c ****   */
 144:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  78              		.loc 1 144 0
  79 0046 0123     		movs	r3, #1
  80 0048 0793     		str	r3, [sp, #28]
 145:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  81              		.loc 1 145 0
  82 004a 4FF48033 		mov	r3, #65536
  83 004e 0893     		str	r3, [sp, #32]
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccRSbPQP.s 			page 5


  84              		.loc 1 146 0
  85 0050 0225     		movs	r5, #2
  86 0052 0D95     		str	r5, [sp, #52]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  87              		.loc 1 147 0
  88 0054 4FF48003 		mov	r3, #4194304
  89 0058 0E93     		str	r3, [sp, #56]
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
  90              		.loc 1 148 0
  91 005a 0423     		movs	r3, #4
  92 005c 0F93     		str	r3, [sp, #60]
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 100;
  93              		.loc 1 149 0
  94 005e 6423     		movs	r3, #100
  95 0060 1093     		str	r3, [sp, #64]
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  96              		.loc 1 150 0
  97 0062 1195     		str	r5, [sp, #68]
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
  98              		.loc 1 151 0
  99 0064 1295     		str	r5, [sp, #72]
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 100              		.loc 1 152 0
 101 0066 1395     		str	r5, [sp, #76]
 153:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 102              		.loc 1 153 0
 103 0068 07A8     		add	r0, sp, #28
 104 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 105              	.LVL1:
 154:Core/Src/main.c ****   {
 155:Core/Src/main.c ****     Error_Handler();
 156:Core/Src/main.c ****   }
 157:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 158:Core/Src/main.c ****   */
 159:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 106              		.loc 1 159 0
 107 006e 0F23     		movs	r3, #15
 108 0070 0293     		str	r3, [sp, #8]
 160:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 109              		.loc 1 161 0
 110 0072 0395     		str	r5, [sp, #12]
 162:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 111              		.loc 1 162 0
 112 0074 0494     		str	r4, [sp, #16]
 163:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 113              		.loc 1 163 0
 114 0076 4FF48053 		mov	r3, #4096
 115 007a 0593     		str	r3, [sp, #20]
 164:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 116              		.loc 1 164 0
 117 007c 0694     		str	r4, [sp, #24]
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 118              		.loc 1 166 0
 119 007e 0321     		movs	r1, #3
 120 0080 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccRSbPQP.s 			page 6


 121 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 122              	.LVL2:
 167:Core/Src/main.c ****   {
 168:Core/Src/main.c ****     Error_Handler();
 169:Core/Src/main.c ****   }
 170:Core/Src/main.c **** }
 123              		.loc 1 170 0
 124 0086 15B0     		add	sp, sp, #84
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 12
 127              		@ sp needed
 128 0088 30BD     		pop	{r4, r5, pc}
 129              	.L4:
 130 008a 00BF     		.align	2
 131              	.L3:
 132 008c 00380240 		.word	1073887232
 133 0090 00700040 		.word	1073770496
 134              		.cfi_endproc
 135              	.LFE767:
 137              		.section	.text.main,"ax",%progbits
 138              		.align	1
 139              		.global	main
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	main:
 146              	.LFB766:
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 147              		.loc 1 74 0
 148              		.cfi_startproc
 149              		@ Volatile: function does not return.
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 08B5     		push	{r3, lr}
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 3, -8
 156              		.cfi_offset 14, -4
  83:Core/Src/main.c **** 
 157              		.loc 1 83 0
 158 0002 FFF7FEFF 		bl	HAL_Init
 159              	.LVL3:
  90:Core/Src/main.c **** 
 160              		.loc 1 90 0
 161 0006 FFF7FEFF 		bl	SystemClock_Config
 162              	.LVL4:
  97:Core/Src/main.c ****   MX_DMA_Init();
 163              		.loc 1 97 0
 164 000a FFF7FEFF 		bl	MX_GPIO_Init
 165              	.LVL5:
  98:Core/Src/main.c ****   MX_ADC1_Init();
 166              		.loc 1 98 0
 167 000e FFF7FEFF 		bl	MX_DMA_Init
 168              	.LVL6:
  99:Core/Src/main.c ****   MX_CRC_Init();
 169              		.loc 1 99 0
ARM GAS  /tmp/ccRSbPQP.s 			page 7


 170 0012 FFF7FEFF 		bl	MX_ADC1_Init
 171              	.LVL7:
 100:Core/Src/main.c ****   MX_I2C1_Init();
 172              		.loc 1 100 0
 173 0016 FFF7FEFF 		bl	MX_CRC_Init
 174              	.LVL8:
 101:Core/Src/main.c ****   MX_SPI1_Init();
 175              		.loc 1 101 0
 176 001a FFF7FEFF 		bl	MX_I2C1_Init
 177              	.LVL9:
 102:Core/Src/main.c ****   MX_SPI2_Init();
 178              		.loc 1 102 0
 179 001e FFF7FEFF 		bl	MX_SPI1_Init
 180              	.LVL10:
 103:Core/Src/main.c ****   MX_UART9_Init();
 181              		.loc 1 103 0
 182 0022 FFF7FEFF 		bl	MX_SPI2_Init
 183              	.LVL11:
 104:Core/Src/main.c ****   MX_UART10_Init();
 184              		.loc 1 104 0
 185 0026 FFF7FEFF 		bl	MX_UART9_Init
 186              	.LVL12:
 105:Core/Src/main.c ****   MX_USART1_UART_Init();
 187              		.loc 1 105 0
 188 002a FFF7FEFF 		bl	MX_UART10_Init
 189              	.LVL13:
 106:Core/Src/main.c ****   MX_USART2_UART_Init();
 190              		.loc 1 106 0
 191 002e FFF7FEFF 		bl	MX_USART1_UART_Init
 192              	.LVL14:
 107:Core/Src/main.c ****   MX_USART3_UART_Init();
 193              		.loc 1 107 0
 194 0032 FFF7FEFF 		bl	MX_USART2_UART_Init
 195              	.LVL15:
 108:Core/Src/main.c ****   MX_USART6_UART_Init();
 196              		.loc 1 108 0
 197 0036 FFF7FEFF 		bl	MX_USART3_UART_Init
 198              	.LVL16:
 109:Core/Src/main.c ****   MX_TIM1_Init();
 199              		.loc 1 109 0
 200 003a FFF7FEFF 		bl	MX_USART6_UART_Init
 201              	.LVL17:
 110:Core/Src/main.c ****   MX_TIM3_Init();
 202              		.loc 1 110 0
 203 003e FFF7FEFF 		bl	MX_TIM1_Init
 204              	.LVL18:
 111:Core/Src/main.c ****   MX_SPI4_Init();
 205              		.loc 1 111 0
 206 0042 FFF7FEFF 		bl	MX_TIM3_Init
 207              	.LVL19:
 112:Core/Src/main.c ****   MX_UART8_Init();
 208              		.loc 1 112 0
 209 0046 FFF7FEFF 		bl	MX_SPI4_Init
 210              	.LVL20:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 211              		.loc 1 113 0
 212 004a FFF7FEFF 		bl	MX_UART8_Init
ARM GAS  /tmp/ccRSbPQP.s 			page 8


 213              	.LVL21:
 214              	.L6:
 215 004e FEE7     		b	.L6
 216              		.cfi_endproc
 217              	.LFE766:
 219              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 220              		.align	1
 221              		.global	HAL_TIM_PeriodElapsedCallback
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
 227              	HAL_TIM_PeriodElapsedCallback:
 228              	.LFB768:
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** /* USER CODE END 4 */
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** /**
 177:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 178:Core/Src/main.c ****   * @note   This function is called  when TIM2 interrupt took place, inside
 179:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 180:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 181:Core/Src/main.c ****   * @param  htim : TIM handle
 182:Core/Src/main.c ****   * @retval None
 183:Core/Src/main.c ****   */
 184:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 185:Core/Src/main.c **** {
 229              		.loc 1 185 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              	.LVL22:
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI4:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
 186:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 189:Core/Src/main.c ****   if (htim->Instance == TIM2) {
 239              		.loc 1 189 0
 240 0002 0368     		ldr	r3, [r0]
 241 0004 B3F1804F 		cmp	r3, #1073741824
 242 0008 00D0     		beq	.L11
 243              	.LVL23:
 244              	.L8:
 190:Core/Src/main.c ****     HAL_IncTick();
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 195:Core/Src/main.c **** }
 245              		.loc 1 195 0
 246 000a 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccRSbPQP.s 			page 9


 247              	.LVL24:
 248              	.L11:
 190:Core/Src/main.c ****     HAL_IncTick();
 249              		.loc 1 190 0
 250 000c FFF7FEFF 		bl	HAL_IncTick
 251              	.LVL25:
 252              		.loc 1 195 0
 253 0010 FBE7     		b	.L8
 254              		.cfi_endproc
 255              	.LFE768:
 257              		.section	.text.Error_Handler,"ax",%progbits
 258              		.align	1
 259              		.global	Error_Handler
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv4-sp-d16
 265              	Error_Handler:
 266              	.LFB769:
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /**
 198:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 199:Core/Src/main.c ****   * @retval None
 200:Core/Src/main.c ****   */
 201:Core/Src/main.c **** void Error_Handler(void)
 202:Core/Src/main.c **** {
 267              		.loc 1 202 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 203:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 204:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 207:Core/Src/main.c **** }
 272              		.loc 1 207 0
 273 0000 7047     		bx	lr
 274              		.cfi_endproc
 275              	.LFE769:
 277              		.text
 278              	.Letext0:
 279              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 280              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 281              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 282              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 283              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 284              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 285              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 286              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 287              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 288              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 289              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 290              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 291              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 292              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 293              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
ARM GAS  /tmp/ccRSbPQP.s 			page 10


 294              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 295              		.file 18 "Core/Inc/adc.h"
 296              		.file 19 "Core/Inc/crc.h"
 297              		.file 20 "Core/Inc/i2c.h"
 298              		.file 21 "Core/Inc/spi.h"
 299              		.file 22 "Core/Inc/tim.h"
 300              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 301              		.file 24 "Core/Inc/gpio.h"
 302              		.file 25 "Core/Inc/dma.h"
 303              		.file 26 "Core/Inc/usart.h"
 304              		.file 27 "<built-in>"
ARM GAS  /tmp/ccRSbPQP.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccRSbPQP.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccRSbPQP.s:25     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccRSbPQP.s:132    .text.SystemClock_Config:000000000000008c $d
     /tmp/ccRSbPQP.s:138    .text.main:0000000000000000 $t
     /tmp/ccRSbPQP.s:145    .text.main:0000000000000000 main
     /tmp/ccRSbPQP.s:220    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccRSbPQP.s:227    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccRSbPQP.s:258    .text.Error_Handler:0000000000000000 $t
     /tmp/ccRSbPQP.s:265    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_CRC_Init
MX_I2C1_Init
MX_SPI1_Init
MX_SPI2_Init
MX_UART9_Init
MX_UART10_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
MX_USART3_UART_Init
MX_USART6_UART_Init
MX_TIM1_Init
MX_TIM3_Init
MX_SPI4_Init
MX_UART8_Init
HAL_IncTick
