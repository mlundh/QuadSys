ARM GAS  /tmp/ccRtA8ZY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_TIM_Base_MspInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_TIM_Base_MspInit:
  26              	.LFB768:
  27              		.file 1 "Core/Src/tim.c"
   1:Core/Src/tim.c **** /**
   2:Core/Src/tim.c ****   ******************************************************************************
   3:Core/Src/tim.c ****   * File Name          : TIM.c
   4:Core/Src/tim.c ****   * Description        : This file provides code for the configuration
   5:Core/Src/tim.c ****   *                      of the TIM instances.
   6:Core/Src/tim.c ****   ******************************************************************************
   7:Core/Src/tim.c ****   * @attention
   8:Core/Src/tim.c ****   *
   9:Core/Src/tim.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/tim.c ****   * All rights reserved.</center></h2>
  11:Core/Src/tim.c ****   *
  12:Core/Src/tim.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/tim.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/tim.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/tim.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/tim.c ****   *
  17:Core/Src/tim.c ****   ******************************************************************************
  18:Core/Src/tim.c ****   */
  19:Core/Src/tim.c **** 
  20:Core/Src/tim.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/tim.c **** #include "tim.h"
  22:Core/Src/tim.c **** 
  23:Core/Src/tim.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/tim.c **** 
  25:Core/Src/tim.c **** /* USER CODE END 0 */
  26:Core/Src/tim.c **** 
  27:Core/Src/tim.c **** TIM_HandleTypeDef htim1;
  28:Core/Src/tim.c **** TIM_HandleTypeDef htim3;
  29:Core/Src/tim.c **** 
  30:Core/Src/tim.c **** /* TIM1 init function */
  31:Core/Src/tim.c **** void MX_TIM1_Init(void)
ARM GAS  /tmp/ccRtA8ZY.s 			page 2


  32:Core/Src/tim.c **** {
  33:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  34:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  35:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
  36:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
  37:Core/Src/tim.c **** 
  38:Core/Src/tim.c ****   htim1.Instance = TIM1;
  39:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
  40:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  41:Core/Src/tim.c ****   htim1.Init.Period = 0;
  42:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  43:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
  44:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  45:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  46:Core/Src/tim.c ****   {
  47:Core/Src/tim.c ****     Error_Handler();
  48:Core/Src/tim.c ****   }
  49:Core/Src/tim.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  50:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  51:Core/Src/tim.c ****   {
  52:Core/Src/tim.c ****     Error_Handler();
  53:Core/Src/tim.c ****   }
  54:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  55:Core/Src/tim.c ****   {
  56:Core/Src/tim.c ****     Error_Handler();
  57:Core/Src/tim.c ****   }
  58:Core/Src/tim.c ****   if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
  59:Core/Src/tim.c ****   {
  60:Core/Src/tim.c ****     Error_Handler();
  61:Core/Src/tim.c ****   }
  62:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  63:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  64:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  65:Core/Src/tim.c ****   {
  66:Core/Src/tim.c ****     Error_Handler();
  67:Core/Src/tim.c ****   }
  68:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
  69:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
  70:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  71:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  72:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  73:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  74:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  75:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  76:Core/Src/tim.c ****   {
  77:Core/Src/tim.c ****     Error_Handler();
  78:Core/Src/tim.c ****   }
  79:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  80:Core/Src/tim.c ****   {
  81:Core/Src/tim.c ****     Error_Handler();
  82:Core/Src/tim.c ****   }
  83:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  84:Core/Src/tim.c ****   {
  85:Core/Src/tim.c ****     Error_Handler();
  86:Core/Src/tim.c ****   }
  87:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
  88:Core/Src/tim.c ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
ARM GAS  /tmp/ccRtA8ZY.s 			page 3


  89:Core/Src/tim.c ****   {
  90:Core/Src/tim.c ****     Error_Handler();
  91:Core/Src/tim.c ****   }
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
  96:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  97:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  98:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  99:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 100:Core/Src/tim.c ****   {
 101:Core/Src/tim.c ****     Error_Handler();
 102:Core/Src/tim.c ****   }
 103:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim1);
 104:Core/Src/tim.c **** 
 105:Core/Src/tim.c **** }
 106:Core/Src/tim.c **** /* TIM3 init function */
 107:Core/Src/tim.c **** void MX_TIM3_Init(void)
 108:Core/Src/tim.c **** {
 109:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 110:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 111:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 112:Core/Src/tim.c **** 
 113:Core/Src/tim.c ****   htim3.Instance = TIM3;
 114:Core/Src/tim.c ****   htim3.Init.Prescaler = 0;
 115:Core/Src/tim.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 116:Core/Src/tim.c ****   htim3.Init.Period = 0;
 117:Core/Src/tim.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 118:Core/Src/tim.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 119:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 120:Core/Src/tim.c ****   {
 121:Core/Src/tim.c ****     Error_Handler();
 122:Core/Src/tim.c ****   }
 123:Core/Src/tim.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 124:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 125:Core/Src/tim.c ****   {
 126:Core/Src/tim.c ****     Error_Handler();
 127:Core/Src/tim.c ****   }
 128:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 129:Core/Src/tim.c ****   {
 130:Core/Src/tim.c ****     Error_Handler();
 131:Core/Src/tim.c ****   }
 132:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 133:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 134:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 135:Core/Src/tim.c ****   {
 136:Core/Src/tim.c ****     Error_Handler();
 137:Core/Src/tim.c ****   }
 138:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 139:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 140:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 141:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 142:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 143:Core/Src/tim.c ****   {
 144:Core/Src/tim.c ****     Error_Handler();
 145:Core/Src/tim.c ****   }
ARM GAS  /tmp/ccRtA8ZY.s 			page 4


 146:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 147:Core/Src/tim.c ****   {
 148:Core/Src/tim.c ****     Error_Handler();
 149:Core/Src/tim.c ****   }
 150:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 151:Core/Src/tim.c ****   {
 152:Core/Src/tim.c ****     Error_Handler();
 153:Core/Src/tim.c ****   }
 154:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 155:Core/Src/tim.c ****   {
 156:Core/Src/tim.c ****     Error_Handler();
 157:Core/Src/tim.c ****   }
 158:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim3);
 159:Core/Src/tim.c **** 
 160:Core/Src/tim.c **** }
 161:Core/Src/tim.c **** 
 162:Core/Src/tim.c **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
 163:Core/Src/tim.c **** {
  28              		.loc 1 163 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
 164:Core/Src/tim.c **** 
 165:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
  37              		.loc 1 165 0
  38 0002 0368     		ldr	r3, [r0]
  39 0004 104A     		ldr	r2, .L7
  40 0006 9342     		cmp	r3, r2
  41 0008 04D0     		beq	.L5
 166:Core/Src/tim.c ****   {
 167:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 168:Core/Src/tim.c **** 
 169:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 0 */
 170:Core/Src/tim.c ****     /* TIM1 clock enable */
 171:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_ENABLE();
 172:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 173:Core/Src/tim.c **** 
 174:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 1 */
 175:Core/Src/tim.c ****   }
 176:Core/Src/tim.c ****   else if(tim_baseHandle->Instance==TIM3)
  42              		.loc 1 176 0
  43 000a 104A     		ldr	r2, .L7+4
  44 000c 9342     		cmp	r3, r2
  45 000e 0ED0     		beq	.L6
  46              	.L1:
 177:Core/Src/tim.c ****   {
 178:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspInit 0 */
 179:Core/Src/tim.c **** 
 180:Core/Src/tim.c ****   /* USER CODE END TIM3_MspInit 0 */
 181:Core/Src/tim.c ****     /* TIM3 clock enable */
 182:Core/Src/tim.c ****     __HAL_RCC_TIM3_CLK_ENABLE();
 183:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspInit 1 */
ARM GAS  /tmp/ccRtA8ZY.s 			page 5


 184:Core/Src/tim.c **** 
 185:Core/Src/tim.c ****   /* USER CODE END TIM3_MspInit 1 */
 186:Core/Src/tim.c ****   }
 187:Core/Src/tim.c **** }
  47              		.loc 1 187 0
  48 0010 02B0     		add	sp, sp, #8
  49              	.LCFI1:
  50              		.cfi_remember_state
  51              		.cfi_def_cfa_offset 0
  52              		@ sp needed
  53 0012 7047     		bx	lr
  54              	.L5:
  55              	.LCFI2:
  56              		.cfi_restore_state
  57              	.LBB2:
 171:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
  58              		.loc 1 171 0
  59 0014 0023     		movs	r3, #0
  60 0016 0093     		str	r3, [sp]
  61 0018 0D4B     		ldr	r3, .L7+8
  62 001a 5A6C     		ldr	r2, [r3, #68]
  63 001c 42F00102 		orr	r2, r2, #1
  64 0020 5A64     		str	r2, [r3, #68]
  65 0022 5B6C     		ldr	r3, [r3, #68]
  66 0024 03F00103 		and	r3, r3, #1
  67 0028 0093     		str	r3, [sp]
  68 002a 009B     		ldr	r3, [sp]
  69              	.LBE2:
  70 002c F0E7     		b	.L1
  71              	.L6:
  72              	.LBB3:
 182:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspInit 1 */
  73              		.loc 1 182 0
  74 002e 0023     		movs	r3, #0
  75 0030 0193     		str	r3, [sp, #4]
  76 0032 074B     		ldr	r3, .L7+8
  77 0034 1A6C     		ldr	r2, [r3, #64]
  78 0036 42F00202 		orr	r2, r2, #2
  79 003a 1A64     		str	r2, [r3, #64]
  80 003c 1B6C     		ldr	r3, [r3, #64]
  81 003e 03F00203 		and	r3, r3, #2
  82 0042 0193     		str	r3, [sp, #4]
  83 0044 019B     		ldr	r3, [sp, #4]
  84              	.LBE3:
  85              		.loc 1 187 0
  86 0046 E3E7     		b	.L1
  87              	.L8:
  88              		.align	2
  89              	.L7:
  90 0048 00000140 		.word	1073807360
  91 004c 00040040 		.word	1073742848
  92 0050 00380240 		.word	1073887232
  93              		.cfi_endproc
  94              	.LFE768:
  96              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
  97              		.align	1
  98              		.global	HAL_TIM_MspPostInit
ARM GAS  /tmp/ccRtA8ZY.s 			page 6


  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	HAL_TIM_MspPostInit:
 105              	.LFB769:
 188:Core/Src/tim.c **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 189:Core/Src/tim.c **** {
 106              		.loc 1 189 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 32
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              	.LVL1:
 111 0000 70B5     		push	{r4, r5, r6, lr}
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 16
 114              		.cfi_offset 4, -16
 115              		.cfi_offset 5, -12
 116              		.cfi_offset 6, -8
 117              		.cfi_offset 14, -4
 118 0002 88B0     		sub	sp, sp, #32
 119              	.LCFI4:
 120              		.cfi_def_cfa_offset 48
 190:Core/Src/tim.c **** 
 191:Core/Src/tim.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 121              		.loc 1 191 0
 122 0004 0023     		movs	r3, #0
 123 0006 0393     		str	r3, [sp, #12]
 124 0008 0493     		str	r3, [sp, #16]
 125 000a 0593     		str	r3, [sp, #20]
 126 000c 0693     		str	r3, [sp, #24]
 127 000e 0793     		str	r3, [sp, #28]
 192:Core/Src/tim.c ****   if(timHandle->Instance==TIM1)
 128              		.loc 1 192 0
 129 0010 0368     		ldr	r3, [r0]
 130 0012 254A     		ldr	r2, .L15
 131 0014 9342     		cmp	r3, r2
 132 0016 04D0     		beq	.L13
 193:Core/Src/tim.c ****   {
 194:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 195:Core/Src/tim.c **** 
 196:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 0 */
 197:Core/Src/tim.c ****     __HAL_RCC_GPIOE_CLK_ENABLE();
 198:Core/Src/tim.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 199:Core/Src/tim.c ****     /**TIM1 GPIO Configuration    
 200:Core/Src/tim.c ****     PE9     ------> TIM1_CH1
 201:Core/Src/tim.c ****     PE13     ------> TIM1_CH3
 202:Core/Src/tim.c ****     PE14     ------> TIM1_CH4
 203:Core/Src/tim.c ****     PA9     ------> TIM1_CH2 
 204:Core/Src/tim.c ****     */
 205:Core/Src/tim.c ****     GPIO_InitStruct.Pin = PWM_1_Pin|PWM_3_Pin|PWM_4_Pin;
 206:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 207:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 208:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 209:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 210:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 211:Core/Src/tim.c **** 
ARM GAS  /tmp/ccRtA8ZY.s 			page 7


 212:Core/Src/tim.c ****     GPIO_InitStruct.Pin = PWM_2_Pin;
 213:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 214:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 215:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 216:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 217:Core/Src/tim.c ****     HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 218:Core/Src/tim.c **** 
 219:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 220:Core/Src/tim.c **** 
 221:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 1 */
 222:Core/Src/tim.c ****   }
 223:Core/Src/tim.c ****   else if(timHandle->Instance==TIM3)
 133              		.loc 1 223 0
 134 0018 244A     		ldr	r2, .L15+4
 135 001a 9342     		cmp	r3, r2
 136 001c 2ED0     		beq	.L14
 137              	.LVL2:
 138              	.L9:
 224:Core/Src/tim.c ****   {
 225:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspPostInit 0 */
 226:Core/Src/tim.c **** 
 227:Core/Src/tim.c ****   /* USER CODE END TIM3_MspPostInit 0 */
 228:Core/Src/tim.c ****   
 229:Core/Src/tim.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 230:Core/Src/tim.c ****     /**TIM3 GPIO Configuration    
 231:Core/Src/tim.c ****     PB0     ------> TIM3_CH3
 232:Core/Src/tim.c ****     PB1     ------> TIM3_CH4
 233:Core/Src/tim.c ****     PB4     ------> TIM3_CH1
 234:Core/Src/tim.c ****     PB5     ------> TIM3_CH2 
 235:Core/Src/tim.c ****     */
 236:Core/Src/tim.c ****     GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin|PWM_7_Pin|PWM_8_Pin;
 237:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 238:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 239:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 240:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 241:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 242:Core/Src/tim.c **** 
 243:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspPostInit 1 */
 244:Core/Src/tim.c **** 
 245:Core/Src/tim.c ****   /* USER CODE END TIM3_MspPostInit 1 */
 246:Core/Src/tim.c ****   }
 247:Core/Src/tim.c **** 
 248:Core/Src/tim.c **** }
 139              		.loc 1 248 0
 140 001e 08B0     		add	sp, sp, #32
 141              	.LCFI5:
 142              		.cfi_remember_state
 143              		.cfi_def_cfa_offset 16
 144              		@ sp needed
 145 0020 70BD     		pop	{r4, r5, r6, pc}
 146              	.LVL3:
 147              	.L13:
 148              	.LCFI6:
 149              		.cfi_restore_state
 150              	.LBB4:
 197:Core/Src/tim.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 151              		.loc 1 197 0
ARM GAS  /tmp/ccRtA8ZY.s 			page 8


 152 0022 0024     		movs	r4, #0
 153 0024 0094     		str	r4, [sp]
 154 0026 224B     		ldr	r3, .L15+8
 155 0028 1A6B     		ldr	r2, [r3, #48]
 156 002a 42F01002 		orr	r2, r2, #16
 157 002e 1A63     		str	r2, [r3, #48]
 158 0030 1A6B     		ldr	r2, [r3, #48]
 159 0032 02F01002 		and	r2, r2, #16
 160 0036 0092     		str	r2, [sp]
 161 0038 009A     		ldr	r2, [sp]
 162              	.LBE4:
 163              	.LBB5:
 198:Core/Src/tim.c ****     /**TIM1 GPIO Configuration    
 164              		.loc 1 198 0
 165 003a 0194     		str	r4, [sp, #4]
 166 003c 1A6B     		ldr	r2, [r3, #48]
 167 003e 42F00102 		orr	r2, r2, #1
 168 0042 1A63     		str	r2, [r3, #48]
 169 0044 1B6B     		ldr	r3, [r3, #48]
 170 0046 03F00103 		and	r3, r3, #1
 171 004a 0193     		str	r3, [sp, #4]
 172 004c 019B     		ldr	r3, [sp, #4]
 173              	.LBE5:
 205:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 174              		.loc 1 205 0
 175 004e 4FF4C443 		mov	r3, #25088
 176 0052 0393     		str	r3, [sp, #12]
 206:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 177              		.loc 1 206 0
 178 0054 0226     		movs	r6, #2
 179 0056 0496     		str	r6, [sp, #16]
 209:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 180              		.loc 1 209 0
 181 0058 0125     		movs	r5, #1
 182 005a 0795     		str	r5, [sp, #28]
 210:Core/Src/tim.c **** 
 183              		.loc 1 210 0
 184 005c 03A9     		add	r1, sp, #12
 185 005e 1548     		ldr	r0, .L15+12
 186              	.LVL4:
 187 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 188              	.LVL5:
 212:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 189              		.loc 1 212 0
 190 0064 4FF40073 		mov	r3, #512
 191 0068 0393     		str	r3, [sp, #12]
 213:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 192              		.loc 1 213 0
 193 006a 0496     		str	r6, [sp, #16]
 214:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 194              		.loc 1 214 0
 195 006c 0594     		str	r4, [sp, #20]
 215:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 196              		.loc 1 215 0
 197 006e 0694     		str	r4, [sp, #24]
 216:Core/Src/tim.c ****     HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 198              		.loc 1 216 0
ARM GAS  /tmp/ccRtA8ZY.s 			page 9


 199 0070 0795     		str	r5, [sp, #28]
 217:Core/Src/tim.c **** 
 200              		.loc 1 217 0
 201 0072 03A9     		add	r1, sp, #12
 202 0074 1048     		ldr	r0, .L15+16
 203 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 204              	.LVL6:
 205 007a D0E7     		b	.L9
 206              	.LVL7:
 207              	.L14:
 208              	.LBB6:
 229:Core/Src/tim.c ****     /**TIM3 GPIO Configuration    
 209              		.loc 1 229 0
 210 007c 0023     		movs	r3, #0
 211 007e 0293     		str	r3, [sp, #8]
 212 0080 0B4B     		ldr	r3, .L15+8
 213 0082 1A6B     		ldr	r2, [r3, #48]
 214 0084 42F00202 		orr	r2, r2, #2
 215 0088 1A63     		str	r2, [r3, #48]
 216 008a 1B6B     		ldr	r3, [r3, #48]
 217 008c 03F00203 		and	r3, r3, #2
 218 0090 0293     		str	r3, [sp, #8]
 219 0092 029B     		ldr	r3, [sp, #8]
 220              	.LBE6:
 236:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 221              		.loc 1 236 0
 222 0094 3323     		movs	r3, #51
 223 0096 0393     		str	r3, [sp, #12]
 237:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 224              		.loc 1 237 0
 225 0098 0223     		movs	r3, #2
 226 009a 0493     		str	r3, [sp, #16]
 240:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 227              		.loc 1 240 0
 228 009c 0793     		str	r3, [sp, #28]
 241:Core/Src/tim.c **** 
 229              		.loc 1 241 0
 230 009e 03A9     		add	r1, sp, #12
 231 00a0 0648     		ldr	r0, .L15+20
 232              	.LVL8:
 233 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
 234              	.LVL9:
 235              		.loc 1 248 0
 236 00a6 BAE7     		b	.L9
 237              	.L16:
 238              		.align	2
 239              	.L15:
 240 00a8 00000140 		.word	1073807360
 241 00ac 00040040 		.word	1073742848
 242 00b0 00380240 		.word	1073887232
 243 00b4 00100240 		.word	1073876992
 244 00b8 00000240 		.word	1073872896
 245 00bc 00040240 		.word	1073873920
 246              		.cfi_endproc
 247              	.LFE769:
 249              		.section	.text.MX_TIM1_Init,"ax",%progbits
 250              		.align	1
ARM GAS  /tmp/ccRtA8ZY.s 			page 10


 251              		.global	MX_TIM1_Init
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	MX_TIM1_Init:
 258              	.LFB766:
  32:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 259              		.loc 1 32 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 88
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263 0000 10B5     		push	{r4, lr}
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 268 0002 96B0     		sub	sp, sp, #88
 269              	.LCFI8:
 270              		.cfi_def_cfa_offset 96
  33:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 271              		.loc 1 33 0
 272 0004 0024     		movs	r4, #0
 273 0006 1294     		str	r4, [sp, #72]
 274 0008 1394     		str	r4, [sp, #76]
 275 000a 1494     		str	r4, [sp, #80]
 276 000c 1594     		str	r4, [sp, #84]
  34:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 277              		.loc 1 34 0
 278 000e 1094     		str	r4, [sp, #64]
 279 0010 1194     		str	r4, [sp, #68]
  35:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 280              		.loc 1 35 0
 281 0012 0994     		str	r4, [sp, #36]
 282 0014 0A94     		str	r4, [sp, #40]
 283 0016 0B94     		str	r4, [sp, #44]
 284 0018 0C94     		str	r4, [sp, #48]
 285 001a 0D94     		str	r4, [sp, #52]
 286 001c 0E94     		str	r4, [sp, #56]
 287 001e 0F94     		str	r4, [sp, #60]
  36:Core/Src/tim.c **** 
 288              		.loc 1 36 0
 289 0020 2022     		movs	r2, #32
 290 0022 2146     		mov	r1, r4
 291 0024 01A8     		add	r0, sp, #4
 292 0026 FFF7FEFF 		bl	memset
 293              	.LVL10:
  38:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
 294              		.loc 1 38 0
 295 002a 4048     		ldr	r0, .L39
 296 002c 404B     		ldr	r3, .L39+4
 297 002e 0360     		str	r3, [r0]
  39:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 298              		.loc 1 39 0
 299 0030 4460     		str	r4, [r0, #4]
  40:Core/Src/tim.c ****   htim1.Init.Period = 0;
 300              		.loc 1 40 0
ARM GAS  /tmp/ccRtA8ZY.s 			page 11


 301 0032 8460     		str	r4, [r0, #8]
  41:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 302              		.loc 1 41 0
 303 0034 C460     		str	r4, [r0, #12]
  42:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
 304              		.loc 1 42 0
 305 0036 0461     		str	r4, [r0, #16]
  43:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 306              		.loc 1 43 0
 307 0038 4461     		str	r4, [r0, #20]
  44:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 308              		.loc 1 44 0
 309 003a 8461     		str	r4, [r0, #24]
  45:Core/Src/tim.c ****   {
 310              		.loc 1 45 0
 311 003c FFF7FEFF 		bl	HAL_TIM_Base_Init
 312              	.LVL11:
 313 0040 0028     		cmp	r0, #0
 314 0042 55D1     		bne	.L29
 315              	.L18:
  49:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 316              		.loc 1 49 0
 317 0044 16A9     		add	r1, sp, #88
 318 0046 4FF48053 		mov	r3, #4096
 319 004a 41F8103D 		str	r3, [r1, #-16]!
  50:Core/Src/tim.c ****   {
 320              		.loc 1 50 0
 321 004e 3748     		ldr	r0, .L39
 322 0050 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 323              	.LVL12:
 324 0054 0028     		cmp	r0, #0
 325 0056 4ED1     		bne	.L30
 326              	.L19:
  54:Core/Src/tim.c ****   {
 327              		.loc 1 54 0
 328 0058 3448     		ldr	r0, .L39
 329 005a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 330              	.LVL13:
 331 005e 0028     		cmp	r0, #0
 332 0060 4CD1     		bne	.L31
 333              	.L20:
  58:Core/Src/tim.c ****   {
 334              		.loc 1 58 0
 335 0062 3248     		ldr	r0, .L39
 336 0064 FFF7FEFF 		bl	HAL_TIM_OC_Init
 337              	.LVL14:
 338 0068 0028     		cmp	r0, #0
 339 006a 4AD1     		bne	.L32
 340              	.L21:
  62:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 341              		.loc 1 62 0
 342 006c 0023     		movs	r3, #0
 343 006e 1093     		str	r3, [sp, #64]
  63:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 344              		.loc 1 63 0
 345 0070 1193     		str	r3, [sp, #68]
  64:Core/Src/tim.c ****   {
ARM GAS  /tmp/ccRtA8ZY.s 			page 12


 346              		.loc 1 64 0
 347 0072 10A9     		add	r1, sp, #64
 348 0074 2D48     		ldr	r0, .L39
 349 0076 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 350              	.LVL15:
 351 007a 0028     		cmp	r0, #0
 352 007c 44D1     		bne	.L33
 353              	.L22:
  68:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 354              		.loc 1 68 0
 355 007e 6023     		movs	r3, #96
 356 0080 0993     		str	r3, [sp, #36]
  69:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 357              		.loc 1 69 0
 358 0082 0022     		movs	r2, #0
 359 0084 0A92     		str	r2, [sp, #40]
  70:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 360              		.loc 1 70 0
 361 0086 0B92     		str	r2, [sp, #44]
  71:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 362              		.loc 1 71 0
 363 0088 0C92     		str	r2, [sp, #48]
  72:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 364              		.loc 1 72 0
 365 008a 0D92     		str	r2, [sp, #52]
  73:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 366              		.loc 1 73 0
 367 008c 0E92     		str	r2, [sp, #56]
  74:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 368              		.loc 1 74 0
 369 008e 0F92     		str	r2, [sp, #60]
  75:Core/Src/tim.c ****   {
 370              		.loc 1 75 0
 371 0090 09A9     		add	r1, sp, #36
 372 0092 2648     		ldr	r0, .L39
 373 0094 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 374              	.LVL16:
 375 0098 0028     		cmp	r0, #0
 376 009a 38D1     		bne	.L34
 377              	.L23:
  79:Core/Src/tim.c ****   {
 378              		.loc 1 79 0
 379 009c 0422     		movs	r2, #4
 380 009e 09A9     		add	r1, sp, #36
 381 00a0 2248     		ldr	r0, .L39
 382 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 383              	.LVL17:
 384 00a6 0028     		cmp	r0, #0
 385 00a8 34D1     		bne	.L35
 386              	.L24:
  83:Core/Src/tim.c ****   {
 387              		.loc 1 83 0
 388 00aa 0822     		movs	r2, #8
 389 00ac 09A9     		add	r1, sp, #36
 390 00ae 1F48     		ldr	r0, .L39
 391 00b0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 392              	.LVL18:
ARM GAS  /tmp/ccRtA8ZY.s 			page 13


 393 00b4 88BB     		cbnz	r0, .L36
 394              	.L25:
  87:Core/Src/tim.c ****   if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 395              		.loc 1 87 0
 396 00b6 16A9     		add	r1, sp, #88
 397 00b8 0023     		movs	r3, #0
 398 00ba 41F8343D 		str	r3, [r1, #-52]!
  88:Core/Src/tim.c ****   {
 399              		.loc 1 88 0
 400 00be 0C22     		movs	r2, #12
 401 00c0 1A48     		ldr	r0, .L39
 402 00c2 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 403              	.LVL19:
 404 00c6 58BB     		cbnz	r0, .L37
 405              	.L26:
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 406              		.loc 1 92 0
 407 00c8 0023     		movs	r3, #0
 408 00ca 0193     		str	r3, [sp, #4]
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 409              		.loc 1 93 0
 410 00cc 0293     		str	r3, [sp, #8]
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 411              		.loc 1 94 0
 412 00ce 0393     		str	r3, [sp, #12]
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 413              		.loc 1 95 0
 414 00d0 0493     		str	r3, [sp, #16]
  96:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 415              		.loc 1 96 0
 416 00d2 0593     		str	r3, [sp, #20]
  97:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 417              		.loc 1 97 0
 418 00d4 4FF40052 		mov	r2, #8192
 419 00d8 0692     		str	r2, [sp, #24]
  98:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 420              		.loc 1 98 0
 421 00da 0893     		str	r3, [sp, #32]
  99:Core/Src/tim.c ****   {
 422              		.loc 1 99 0
 423 00dc 01A9     		add	r1, sp, #4
 424 00de 1348     		ldr	r0, .L39
 425 00e0 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 426              	.LVL20:
 427 00e4 F8B9     		cbnz	r0, .L38
 428              	.L27:
 103:Core/Src/tim.c **** 
 429              		.loc 1 103 0
 430 00e6 1148     		ldr	r0, .L39
 431 00e8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 432              	.LVL21:
 105:Core/Src/tim.c **** /* TIM3 init function */
 433              		.loc 1 105 0
 434 00ec 16B0     		add	sp, sp, #88
 435              	.LCFI9:
 436              		.cfi_remember_state
 437              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccRtA8ZY.s 			page 14


 438              		@ sp needed
 439 00ee 10BD     		pop	{r4, pc}
 440              	.L29:
 441              	.LCFI10:
 442              		.cfi_restore_state
  47:Core/Src/tim.c ****   }
 443              		.loc 1 47 0
 444 00f0 FFF7FEFF 		bl	Error_Handler
 445              	.LVL22:
 446 00f4 A6E7     		b	.L18
 447              	.L30:
  52:Core/Src/tim.c ****   }
 448              		.loc 1 52 0
 449 00f6 FFF7FEFF 		bl	Error_Handler
 450              	.LVL23:
 451 00fa ADE7     		b	.L19
 452              	.L31:
  56:Core/Src/tim.c ****   }
 453              		.loc 1 56 0
 454 00fc FFF7FEFF 		bl	Error_Handler
 455              	.LVL24:
 456 0100 AFE7     		b	.L20
 457              	.L32:
  60:Core/Src/tim.c ****   }
 458              		.loc 1 60 0
 459 0102 FFF7FEFF 		bl	Error_Handler
 460              	.LVL25:
 461 0106 B1E7     		b	.L21
 462              	.L33:
  66:Core/Src/tim.c ****   }
 463              		.loc 1 66 0
 464 0108 FFF7FEFF 		bl	Error_Handler
 465              	.LVL26:
 466 010c B7E7     		b	.L22
 467              	.L34:
  77:Core/Src/tim.c ****   }
 468              		.loc 1 77 0
 469 010e FFF7FEFF 		bl	Error_Handler
 470              	.LVL27:
 471 0112 C3E7     		b	.L23
 472              	.L35:
  81:Core/Src/tim.c ****   }
 473              		.loc 1 81 0
 474 0114 FFF7FEFF 		bl	Error_Handler
 475              	.LVL28:
 476 0118 C7E7     		b	.L24
 477              	.L36:
  85:Core/Src/tim.c ****   }
 478              		.loc 1 85 0
 479 011a FFF7FEFF 		bl	Error_Handler
 480              	.LVL29:
 481 011e CAE7     		b	.L25
 482              	.L37:
  90:Core/Src/tim.c ****   }
 483              		.loc 1 90 0
 484 0120 FFF7FEFF 		bl	Error_Handler
 485              	.LVL30:
ARM GAS  /tmp/ccRtA8ZY.s 			page 15


 486 0124 D0E7     		b	.L26
 487              	.L38:
 101:Core/Src/tim.c ****   }
 488              		.loc 1 101 0
 489 0126 FFF7FEFF 		bl	Error_Handler
 490              	.LVL31:
 491 012a DCE7     		b	.L27
 492              	.L40:
 493              		.align	2
 494              	.L39:
 495 012c 00000000 		.word	htim1
 496 0130 00000140 		.word	1073807360
 497              		.cfi_endproc
 498              	.LFE766:
 500              		.section	.text.MX_TIM3_Init,"ax",%progbits
 501              		.align	1
 502              		.global	MX_TIM3_Init
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 506              		.fpu fpv4-sp-d16
 508              	MX_TIM3_Init:
 509              	.LFB767:
 108:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 510              		.loc 1 108 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 56
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 00B5     		push	{lr}
 515              	.LCFI11:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 14, -4
 518 0002 8FB0     		sub	sp, sp, #60
 519              	.LCFI12:
 520              		.cfi_def_cfa_offset 64
 109:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 521              		.loc 1 109 0
 522 0004 0023     		movs	r3, #0
 523 0006 0A93     		str	r3, [sp, #40]
 524 0008 0B93     		str	r3, [sp, #44]
 525 000a 0C93     		str	r3, [sp, #48]
 526 000c 0D93     		str	r3, [sp, #52]
 110:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 527              		.loc 1 110 0
 528 000e 0893     		str	r3, [sp, #32]
 529 0010 0993     		str	r3, [sp, #36]
 111:Core/Src/tim.c **** 
 530              		.loc 1 111 0
 531 0012 0193     		str	r3, [sp, #4]
 532 0014 0293     		str	r3, [sp, #8]
 533 0016 0393     		str	r3, [sp, #12]
 534 0018 0493     		str	r3, [sp, #16]
 535 001a 0593     		str	r3, [sp, #20]
 536 001c 0693     		str	r3, [sp, #24]
 537 001e 0793     		str	r3, [sp, #28]
 113:Core/Src/tim.c ****   htim3.Init.Prescaler = 0;
 538              		.loc 1 113 0
ARM GAS  /tmp/ccRtA8ZY.s 			page 16


 539 0020 2F48     		ldr	r0, .L59
 540 0022 304A     		ldr	r2, .L59+4
 541 0024 0260     		str	r2, [r0]
 114:Core/Src/tim.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 542              		.loc 1 114 0
 543 0026 4360     		str	r3, [r0, #4]
 115:Core/Src/tim.c ****   htim3.Init.Period = 0;
 544              		.loc 1 115 0
 545 0028 8360     		str	r3, [r0, #8]
 116:Core/Src/tim.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 546              		.loc 1 116 0
 547 002a C360     		str	r3, [r0, #12]
 117:Core/Src/tim.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 548              		.loc 1 117 0
 549 002c 0361     		str	r3, [r0, #16]
 118:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 550              		.loc 1 118 0
 551 002e 8361     		str	r3, [r0, #24]
 119:Core/Src/tim.c ****   {
 552              		.loc 1 119 0
 553 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 554              	.LVL32:
 555 0034 0028     		cmp	r0, #0
 556 0036 3AD1     		bne	.L51
 557              	.L42:
 123:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 558              		.loc 1 123 0
 559 0038 0EA9     		add	r1, sp, #56
 560 003a 4FF48053 		mov	r3, #4096
 561 003e 41F8103D 		str	r3, [r1, #-16]!
 124:Core/Src/tim.c ****   {
 562              		.loc 1 124 0
 563 0042 2748     		ldr	r0, .L59
 564 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 565              	.LVL33:
 566 0048 0028     		cmp	r0, #0
 567 004a 33D1     		bne	.L52
 568              	.L43:
 128:Core/Src/tim.c ****   {
 569              		.loc 1 128 0
 570 004c 2448     		ldr	r0, .L59
 571 004e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 572              	.LVL34:
 573 0052 0028     		cmp	r0, #0
 574 0054 31D1     		bne	.L53
 575              	.L44:
 132:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 576              		.loc 1 132 0
 577 0056 0023     		movs	r3, #0
 578 0058 0893     		str	r3, [sp, #32]
 133:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 579              		.loc 1 133 0
 580 005a 0993     		str	r3, [sp, #36]
 134:Core/Src/tim.c ****   {
 581              		.loc 1 134 0
 582 005c 08A9     		add	r1, sp, #32
 583 005e 2048     		ldr	r0, .L59
ARM GAS  /tmp/ccRtA8ZY.s 			page 17


 584 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 585              	.LVL35:
 586 0064 60BB     		cbnz	r0, .L54
 587              	.L45:
 138:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 588              		.loc 1 138 0
 589 0066 6023     		movs	r3, #96
 590 0068 0193     		str	r3, [sp, #4]
 139:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 591              		.loc 1 139 0
 592 006a 0022     		movs	r2, #0
 593 006c 0292     		str	r2, [sp, #8]
 140:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 594              		.loc 1 140 0
 595 006e 0392     		str	r2, [sp, #12]
 141:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 596              		.loc 1 141 0
 597 0070 0592     		str	r2, [sp, #20]
 142:Core/Src/tim.c ****   {
 598              		.loc 1 142 0
 599 0072 01A9     		add	r1, sp, #4
 600 0074 1A48     		ldr	r0, .L59
 601 0076 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 602              	.LVL36:
 603 007a 20BB     		cbnz	r0, .L55
 604              	.L46:
 146:Core/Src/tim.c ****   {
 605              		.loc 1 146 0
 606 007c 0422     		movs	r2, #4
 607 007e 0DEB0201 		add	r1, sp, r2
 608 0082 1748     		ldr	r0, .L59
 609 0084 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 610              	.LVL37:
 611 0088 00BB     		cbnz	r0, .L56
 612              	.L47:
 150:Core/Src/tim.c ****   {
 613              		.loc 1 150 0
 614 008a 0822     		movs	r2, #8
 615 008c 01A9     		add	r1, sp, #4
 616 008e 1448     		ldr	r0, .L59
 617 0090 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 618              	.LVL38:
 619 0094 E8B9     		cbnz	r0, .L57
 620              	.L48:
 154:Core/Src/tim.c ****   {
 621              		.loc 1 154 0
 622 0096 0C22     		movs	r2, #12
 623 0098 01A9     		add	r1, sp, #4
 624 009a 1148     		ldr	r0, .L59
 625 009c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 626              	.LVL39:
 627 00a0 D0B9     		cbnz	r0, .L58
 628              	.L49:
 158:Core/Src/tim.c **** 
 629              		.loc 1 158 0
 630 00a2 0F48     		ldr	r0, .L59
 631 00a4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
ARM GAS  /tmp/ccRtA8ZY.s 			page 18


 632              	.LVL40:
 160:Core/Src/tim.c **** 
 633              		.loc 1 160 0
 634 00a8 0FB0     		add	sp, sp, #60
 635              	.LCFI13:
 636              		.cfi_remember_state
 637              		.cfi_def_cfa_offset 4
 638              		@ sp needed
 639 00aa 5DF804FB 		ldr	pc, [sp], #4
 640              	.L51:
 641              	.LCFI14:
 642              		.cfi_restore_state
 121:Core/Src/tim.c ****   }
 643              		.loc 1 121 0
 644 00ae FFF7FEFF 		bl	Error_Handler
 645              	.LVL41:
 646 00b2 C1E7     		b	.L42
 647              	.L52:
 126:Core/Src/tim.c ****   }
 648              		.loc 1 126 0
 649 00b4 FFF7FEFF 		bl	Error_Handler
 650              	.LVL42:
 651 00b8 C8E7     		b	.L43
 652              	.L53:
 130:Core/Src/tim.c ****   }
 653              		.loc 1 130 0
 654 00ba FFF7FEFF 		bl	Error_Handler
 655              	.LVL43:
 656 00be CAE7     		b	.L44
 657              	.L54:
 136:Core/Src/tim.c ****   }
 658              		.loc 1 136 0
 659 00c0 FFF7FEFF 		bl	Error_Handler
 660              	.LVL44:
 661 00c4 CFE7     		b	.L45
 662              	.L55:
 144:Core/Src/tim.c ****   }
 663              		.loc 1 144 0
 664 00c6 FFF7FEFF 		bl	Error_Handler
 665              	.LVL45:
 666 00ca D7E7     		b	.L46
 667              	.L56:
 148:Core/Src/tim.c ****   }
 668              		.loc 1 148 0
 669 00cc FFF7FEFF 		bl	Error_Handler
 670              	.LVL46:
 671 00d0 DBE7     		b	.L47
 672              	.L57:
 152:Core/Src/tim.c ****   }
 673              		.loc 1 152 0
 674 00d2 FFF7FEFF 		bl	Error_Handler
 675              	.LVL47:
 676 00d6 DEE7     		b	.L48
 677              	.L58:
 156:Core/Src/tim.c ****   }
 678              		.loc 1 156 0
 679 00d8 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccRtA8ZY.s 			page 19


 680              	.LVL48:
 681 00dc E1E7     		b	.L49
 682              	.L60:
 683 00de 00BF     		.align	2
 684              	.L59:
 685 00e0 00000000 		.word	htim3
 686 00e4 00040040 		.word	1073742848
 687              		.cfi_endproc
 688              	.LFE767:
 690              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 691              		.align	1
 692              		.global	HAL_TIM_Base_MspDeInit
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 696              		.fpu fpv4-sp-d16
 698              	HAL_TIM_Base_MspDeInit:
 699              	.LFB770:
 249:Core/Src/tim.c **** 
 250:Core/Src/tim.c **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 251:Core/Src/tim.c **** {
 700              		.loc 1 251 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              		@ link register save eliminated.
 705              	.LVL49:
 252:Core/Src/tim.c **** 
 253:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
 706              		.loc 1 253 0
 707 0000 0368     		ldr	r3, [r0]
 708 0002 0A4A     		ldr	r2, .L66
 709 0004 9342     		cmp	r3, r2
 710 0006 03D0     		beq	.L64
 254:Core/Src/tim.c ****   {
 255:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 256:Core/Src/tim.c **** 
 257:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 0 */
 258:Core/Src/tim.c ****     /* Peripheral clock disable */
 259:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_DISABLE();
 260:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 261:Core/Src/tim.c **** 
 262:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 1 */
 263:Core/Src/tim.c ****   }
 264:Core/Src/tim.c ****   else if(tim_baseHandle->Instance==TIM3)
 711              		.loc 1 264 0
 712 0008 094A     		ldr	r2, .L66+4
 713 000a 9342     		cmp	r3, r2
 714 000c 07D0     		beq	.L65
 715              	.L61:
 265:Core/Src/tim.c ****   {
 266:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspDeInit 0 */
 267:Core/Src/tim.c **** 
 268:Core/Src/tim.c ****   /* USER CODE END TIM3_MspDeInit 0 */
 269:Core/Src/tim.c ****     /* Peripheral clock disable */
 270:Core/Src/tim.c ****     __HAL_RCC_TIM3_CLK_DISABLE();
 271:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspDeInit 1 */
ARM GAS  /tmp/ccRtA8ZY.s 			page 20


 272:Core/Src/tim.c **** 
 273:Core/Src/tim.c ****   /* USER CODE END TIM3_MspDeInit 1 */
 274:Core/Src/tim.c ****   }
 275:Core/Src/tim.c **** } 
 716              		.loc 1 275 0
 717 000e 7047     		bx	lr
 718              	.L64:
 259:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 719              		.loc 1 259 0
 720 0010 02F59C32 		add	r2, r2, #79872
 721 0014 536C     		ldr	r3, [r2, #68]
 722 0016 23F00103 		bic	r3, r3, #1
 723 001a 5364     		str	r3, [r2, #68]
 724 001c 7047     		bx	lr
 725              	.L65:
 270:Core/Src/tim.c ****   /* USER CODE BEGIN TIM3_MspDeInit 1 */
 726              		.loc 1 270 0
 727 001e 02F50D32 		add	r2, r2, #144384
 728 0022 136C     		ldr	r3, [r2, #64]
 729 0024 23F00203 		bic	r3, r3, #2
 730 0028 1364     		str	r3, [r2, #64]
 731              		.loc 1 275 0
 732 002a F0E7     		b	.L61
 733              	.L67:
 734              		.align	2
 735              	.L66:
 736 002c 00000140 		.word	1073807360
 737 0030 00040040 		.word	1073742848
 738              		.cfi_endproc
 739              	.LFE770:
 741              		.comm	htim3,64,4
 742              		.comm	htim1,64,4
 743              		.text
 744              	.Letext0:
 745              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 746              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 747              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 748              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 749              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 750              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 751              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 752              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 753              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 754              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 755              		.file 12 "Core/Inc/tim.h"
 756              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 757              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 758              		.file 15 "Core/Inc/main.h"
 759              		.file 16 "<built-in>"
ARM GAS  /tmp/ccRtA8ZY.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
     /tmp/ccRtA8ZY.s:18     .text.HAL_TIM_Base_MspInit:0000000000000000 $t
     /tmp/ccRtA8ZY.s:25     .text.HAL_TIM_Base_MspInit:0000000000000000 HAL_TIM_Base_MspInit
     /tmp/ccRtA8ZY.s:90     .text.HAL_TIM_Base_MspInit:0000000000000048 $d
     /tmp/ccRtA8ZY.s:97     .text.HAL_TIM_MspPostInit:0000000000000000 $t
     /tmp/ccRtA8ZY.s:104    .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
     /tmp/ccRtA8ZY.s:240    .text.HAL_TIM_MspPostInit:00000000000000a8 $d
     /tmp/ccRtA8ZY.s:250    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccRtA8ZY.s:257    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccRtA8ZY.s:495    .text.MX_TIM1_Init:000000000000012c $d
                            *COM*:0000000000000040 htim1
     /tmp/ccRtA8ZY.s:501    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccRtA8ZY.s:508    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccRtA8ZY.s:685    .text.MX_TIM3_Init:00000000000000e0 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccRtA8ZY.s:691    .text.HAL_TIM_Base_MspDeInit:0000000000000000 $t
     /tmp/ccRtA8ZY.s:698    .text.HAL_TIM_Base_MspDeInit:0000000000000000 HAL_TIM_Base_MspDeInit
     /tmp/ccRtA8ZY.s:736    .text.HAL_TIM_Base_MspDeInit:000000000000002c $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
Error_Handler
